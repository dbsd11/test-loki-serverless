# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------

edition: 1.0.0          #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: framework         #  项目名称
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "{{ access }}"


vars:
  region: "cn-hangzhou" 
  service:
    name: "loki-serverless"
    description: 'Loki serverless be deployed by Serverless Devs'
    nasConfig: auto

services:
  loki-service: # 业务名称/模块名称
    component:  fc    # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:          # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy:
        - run: mkdir /etc/loki && cp ./loki/loki-config.yaml /etc/loki/local-config.yaml
      post-deploy:  # 在deploy之前运行
        - component: fc nas upload -ro loki/data/ /mnt/auto/loki-data  # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
#        - plugin: myplugin                 # 与运行的插件 （可以通过s cli registry search --type Plugin 获取组件列表）
#          args:                            # 插件的参数信息
#            testKey: testValue
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: "loki-service"
        description: 'loki service Function'
        runtime: custom-container
        codeUri: "./loki"
        timeout: 7200
        memorySize: 3072
        instanceConcurrency: 2
        caPort: 3100
        customContainerConfig:
          image: registry.cn-hangzhou.aliyuncs.com/dbsnolimit/loki                # Container image warehouse address
          # command: ["/usr/bin/loki"]
          accelerationType: Default # Mirror acceleration switch, optional values: 'Default', 'None', the former means on, the latter means off
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*

  helper: # 辅助函数, 2 min 定时预热
    component: fc  # 组件名称
    actions:
      post-deploy: 
        - component: fc invoke
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: keep-warm-loki
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './helper'
        handler: index.handler
        runtime: python3
        timeout: 120
        memorySize: 128
        instanceConcurrency: 1
        environmentVariables:
          LOKI_URL: ${loki-service.output.url.custom_domain[0].domain}
      triggers:
        - name: timerTrigger     
          type: timer   
          # qualifier: LATEST    
          config:    
            payload: '{}'    
            cronExpression: '@every 60m'    
            enable: true